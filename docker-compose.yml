services:
  kong:
    image: kong:3.4.0
    container_name: kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PLUGINS: bundled,auth-check
    volumes:
      - ./kong.yml:/etc/kong/kong.yml:ro
      - ./kong/plugins/auth-check:/usr/local/share/lua/5.1/kong/plugins/auth-check
    ports:
      - "8000:8000"
      - "8001:8001"
    networks:
      - app-net
    depends_on:
      - authservice
      - userservice
      - expenseservice
      - dsservice

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-net
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "29092:29092"
    networks:
      - app-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  authservice:
    build:
      context: .
      dockerfile: authservice/Dockerfile
    container_name: authservice
    env_file:
      - ./authservice/.env
    networks:
      - app-net

  userservice:
    build:
      context: .
      dockerfile: userservice/Dockerfile
    container_name: userservice
    env_file:
      - ./userservice/.env
    networks:
      - app-net

  expenseservice:
    build:
      context: .
      dockerfile: expenseservice/Dockerfile
    container_name: expenseservice
    env_file:
      - ./expenseservice/.env
    networks:
      - app-net

  dsservice:
    build:
      context: ./dsservice
      dockerfile: Dockerfile
    container_name: dsservice
    env_file:
      - ./dsservice/source/app/.env
    depends_on:
      - kafka
    networks:
      - app-net

networks:
  app-net:
    driver: bridge